name: x86_vsim_model_test

on:
  push:
    branches: [ vx-delegate.v2.4.1 ]
  pull_request:
    branches: [ vx-delegate.v2.4.1 ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build_benchmark_model:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake tensorflow/lite -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DTFLITE_ENABLE_VX=ON -DTFLITE_ENABLE_XNNPACK=OFF

    - name: Build
      # Build your program with the given configuration
      run: make -C ${{github.workspace}}/build benchmark_model -j8

    - name: Test Models
      # Test TfLite models with benchmark_model
      run: |
        export LD_LIBRARY_PATH=${{github.workspace}}/build/_deps/tim-vx-src/prebuilt-sdk/x86_64_linux/lib
        export VIVANTE_SDK_DIR=${{github.workspace}}/build/_deps/tim-vx-src/prebuilt-sdk/x86_64_linux
        /lhome/yuenan/wksp/CI/actions-runner/_work/script/model_test.sh
